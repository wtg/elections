#!/usr/bin/env node

/**
 * Dependencies
 */
var mysql = require('mysql');
var db_name = mysql.escapeId(require('../config.js').db_name);
var connection = mysql.createConnection(require('../config.js').db);


/**
 * Generic callback to handle any errors returned by the executed MySQL Queries
 */
var errorCallback = function (err, rows, fields) {
    if (err) throw err;
};


/**
 * Connect to the database
 */
connection.connect();


/**
 * Disable foreign key checks and standard precautions (will be re-enabled after installation)
 */
connection.query("SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;", errorCallback);
connection.query("SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;", errorCallback);
connection.query("SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=\'TRADITIONAL,ALLOW_INVALID_DATES\';", errorCallback);


/**
 * Establish the database and use it for subsequent queries
 */
connection.query("CREATE SCHEMA IF NOT EXISTS " + db_name + " DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci", errorCallback);
connection.query("USE " + db_name, errorCallback);


/**
 * Execute the creation of the elections table. This table keeps track of individual elections (i.e. GM Week 20xx, etc.)
 * for the purpose of associating different items together and manage duplicate nominations, candidates, etc.
 */
connection.query("CREATE TABLE IF NOT EXISTS " + db_name + ".`elections` (" +
    "`election_id` INT NOT NULL AUTO_INCREMENT," +
    "`election_name` VARCHAR(45) NOT NULL," +
    "`primary_date` DATE NOT NULL," +
    "`final_date` DATE NOT NULL," +
    "`runoff_date` DATE NOT NULL," +
    "PRIMARY KEY (`election_id`) )" +
    "ENGINE = InnoDB", errorCallback);


/**
 * Execute the creation of the offices table. This table maintains the positions available for election (using the
 * election_id as a foreign key)
 */
connection.query("CREATE TABLE IF NOT EXISTS " + db_name + ".`offices` (" +
    "`office_id` INT NOT NULL AUTO_INCREMENT," +
    "`election_id` INT NOT NULL," +
    "`name` VARCHAR(255) NOT NULL," +
    "`description` VARCHAR(1000) NOT NULL," +
    "`openings` INT NOT NULL," +
    "`nominations_required` INT NOT NULL," +
    "`type` VARCHAR(45) NOT NULL," +
    "`disabled` TINYINT(1) NOT NULL DEFAULT 0," +
    "PRIMARY KEY (`office_id`) ," +
    "INDEX `offices_fk1_idx` (`election_id` ASC) ," +
    "CONSTRAINT `offices_fk1`" +
    "  FOREIGN KEY (`election_id`)" +
    "  REFERENCES " + db_name + ".`elections` (`election_id`)" +
    "  ON DELETE NO ACTION" +
    "  ON UPDATE NO ACTION)", errorCallback);


/**
 * Execute the creation of the parties table. This table maintains the parties active in an election
 */
connection.query("CREATE TABLE IF NOT EXISTS " + db_name + ".`parties` (" +
    "`party_id` INT NOT NULL AUTO_INCREMENT," +
    "`name` VARCHAR(45) NOT NULL," +
    "`platform` TEXT NOT NULL," +
    "PRIMARY KEY (`party_id`))" +
    "ENGINE = InnoDB;", errorCallback);


/**
 * Execute the creation of the candidates table. This table maintains all candidates running for all elections (using
 * election_id and office_id as foreign keys)
 */
connection.query("CREATE TABLE IF NOT EXISTS " + db_name + ".`candidates` (" +
    "`rcs_id` VARCHAR(45) NOT NULL," +
    "`office_id` INT NOT NULL," +
    "`election_id` INT NOT NULL," +
    "`party_id` INT NULL," +
    "`nominations` INT NOT NULL DEFAULT 0," +
    "PRIMARY KEY (`rcs_id`, `office_id`) ," +
    "INDEX `candidates_fk2_idx` (`election_id` ASC) ," +
    "CONSTRAINT `candidates_fk1`" +
    "  FOREIGN KEY (`office_id`)" +
    "  REFERENCES " + db_name + ".`offices` (`office_id`)" +
    "  ON DELETE CASCADE" +
    "  ON UPDATE NO ACTION," +
    "CONSTRAINT `candidates_fk2`" +
    "  FOREIGN KEY (`election_id`)" +
    "  REFERENCES " + db_name + ".`elections` (`election_id`)" +
    "  ON DELETE NO ACTION" +
    "  ON UPDATE NO ACTION," +
    "CONSTRAINT `candidates_fk3`" +
    "  FOREIGN KEY (`party_id`)" +
    "  REFERENCES " + db_name + ".`parties` (`party_id`)" +
    "  ON DELETE NO ACTION" +
    "  ON UPDATE SET NULL)" +
    "ENGINE = InnoDB", errorCallback);


/**
 * Execute the creation of the candidate_data table. This table maintains the metadata for candidates, that shouldn't
 * be duplicated (if a candidate is running for multiple positions)
 */
connection.query("CREATE TABLE IF NOT EXISTS " + db_name + ".`candidate_data` (" +
    "`rcs_id` VARCHAR(45) NOT NULL," +
    "`preferred_name` VARCHAR(45) NULL," +
    "`first_name` VARCHAR(45) NULL," +
    "`middle_name` VARCHAR(45) NULL," +
    "`last_name` VARCHAR(45) NULL," +
    "`greek_affiliated` TINYINT(1) NOT NULL DEFAULT 0," +
    "`entry_date` VARCHAR(45) NOT NULL," +
    "`class_by_credit` VARCHAR(45) NOT NULL," +
    "`grad_date` VARCHAR(45) NOT NULL," +
    "`rin` VARCHAR(9) NOT NULL," +
    "`major` VARCHAR(45) NULL," +
    "`about` TEXT DEFAULT NULL," +
    "`platform` TEXT DEFAULT NULL," +
    "`misc_info` VARCHAR(2000) NULL DEFAULT NULL," +
    "`profile_id` VARCHAR(255), " +
    "`profile_url` VARCHAR(2000) DEFAULT NULL," +
    "`cover_id` VARCHAR(255), " +
    "`cover_url` VARCHAR(2000) DEFAULT NULL," +
    "`video_url` VARCHAR(2000) DEFAULT NULL," +
    "PRIMARY KEY (`rcs_id`))" +
    "ENGINE = InnoDB", errorCallback);


/**
 * Execute the creation of the nominations table. This table maintains all nominations for all candidates (using
 * election_id, office_id, and rcs_id as foreign keys)
 */
connection.query("CREATE TABLE IF NOT EXISTS " + db_name + ".`nominations` (" +
    "`nomination_id` INT NOT NULL AUTO_INCREMENT," +
    "`election_id` INT NOT NULL," +
    "`rcs_id` VARCHAR(45) NOT NULL," +
    "`office_id` INT NOT NULL," +
    "`nomination_rin` VARCHAR(9) NOT NULL," +
    "`date` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP," +
    "INDEX `nominations_fk2_idx` (`office_id` ASC) ," +
    "PRIMARY KEY (`nomination_id`) ," +
    "INDEX `nominations_fk3_idx` (`election_id` ASC) ," +
    "CONSTRAINT `nominations_fk1`" +
    "  FOREIGN KEY (`rcs_id` , `office_id`)" +
    "  REFERENCES " + db_name + ".`candidates` (`rcs_id` , `office_id`)" +
    "  ON DELETE CASCADE" +
    "  ON UPDATE CASCADE," +
    "CONSTRAINT `nominations_fk2`" +
    "  FOREIGN KEY (`office_id`)" +
    "  REFERENCES " + db_name + ".`offices` (`office_id`)" +
    "  ON DELETE CASCADE" +
    "  ON UPDATE CASCADE," +
    "CONSTRAINT `nominations_fk3`" +
    "  FOREIGN KEY (`election_id`)" +
    "  REFERENCES " + db_name + ".`elections` (`election_id`)" +
    "  ON DELETE CASCADE" +
    "  ON UPDATE CASCADE)" +
    "ENGINE = InnoDB", errorCallback);


/**
 * Execute the creation of the party_officers table. This table maintains all party officers for all parties
 */
connection.query("CREATE TABLE IF NOT EXISTS " + db_name + ".`party_officers` (" +
    "`party_id` INT NOT NULL," +
    "`rcs_id` VARCHAR(45) NOT NULL," +
    "`position` VARCHAR(45) NOT NULL," +
    "`is_highest` INT NOT NULL DEFAULT 0," +
    "`first_name` VARCHAR(45) NOT NULL," +
    "`middle_name` VARCHAR(45) NOT NULL," +
    "`preferred_name` VARCHAR(45) NOT NULL," +
    "`last_name` VARCHAR(45) NOT NULL," +
    "PRIMARY KEY (`party_id`,`rcs_id`)," +
    "KEY `officer_fk1_idx` (`party_id`)," +
    "UNIQUE KEY `party_officer_id` (`rcs_id`, `party_id`)," +
    "CONSTRAINT `officer_fk1`" +
    "  FOREIGN KEY (`party_id`)" +
    "  REFERENCES " + db_name + ".`parties` (`party_id`)" +
    "  ON DELETE CASCADE" +
    "  ON UPDATE NO ACTION)" +
    "ENGINE = InnoDB;", errorCallback);


/**
 * Execute the creation of the assistants table. This table maintains all candidate assistants for all candidates
 */
connection.query("CREATE TABLE IF NOT EXISTS " + db_name + ".`assistants` (" +
    "`assistant_id` INT NOT NULL AUTO_INCREMENT," +
    "`rcs_id` VARCHAR(45) NOT NULL," +
    "`candidate_rcs_id` VARCHAR(45) NOT NULL," +
    "`first_name` VARCHAR(45) NOT NULL," +
    "`middle_name` VARCHAR(45) NOT NULL," +
    "`last_name` VARCHAR(45) NOT NULL," +
    "`preferred_name` VARCHAR(45) NULL," +
    "`rin` VARCHAR(9) NOT NULL," +
    "PRIMARY KEY (`assistant_id`)," +
    "INDEX `assistant_fk1_idx` (`candidate_rcs_id` ASC)," +
    "CONSTRAINT `assistant_fk1`" +
    "  FOREIGN KEY (`candidate_rcs_id`)" +
    "  REFERENCES " + db_name + ".`candidates` (`rcs_id`)" +
    "  ON DELETE NO ACTION" +
    "  ON UPDATE NO ACTION)" +
    "ENGINE = InnoDB;", errorCallback);


/**
 * Execute the creation of a log table. This table is used to log actions taken by users and administrators, to ensure
 * accountability and deter tampering of campaign data
 */
connection.query("CREATE TABLE IF NOT EXISTS " + db_name + ".`log` (" +
    "`log_id` INT NOT NULL AUTO_INCREMENT," +
    "`rcs_id` VARCHAR(45) NOT NULL," +
    "`type` VARCHAR(45) NOT NULL," +
    "`description` VARCHAR(255) NOT NULL," +
    "`time` TIMESTAMP DEFAULT CURRENT_TIMESTAMP," +
    "PRIMARY KEY (`log_id`) )" +
    "ENGINE = InnoDB;", errorCallback);


/**
 * Execute the creation of an adminsitrators table. This table tracks who has adminsitrative access, and what level of
 * access
 */
connection.query("CREATE TABLE IF NOT EXISTS " + db_name + ".`administrators` (" +
    "`rcs_id` VARCHAR(45) NOT NULL," +
    "`admin_type` TINYINT(1) NOT NULL DEFAULT 0 COMMENT '0 = no admin\n1 = RnE\n2 = WTG\n3 = Full Admin'," +
    "PRIMARY KEY (`rcs_id`) )" +
    "ENGINE = InnoDB", errorCallback);


/**
 * Execute the creation of a views table. This table stores public pages that administrators can add, delete, and modify
 */
connection.query("CREATE TABLE IF NOT EXISTS " + db_name + ".`pages` (" +
    "`page_id` INT NOT NULL AUTO_INCREMENT," +
    "`title` VARCHAR(45) NOT NULL," +
    "`slug` VARCHAR(45) NOT NULL," +
    "`content` TEXT NOT NULL," +
    "`created_by` VARCHAR(45) NOT NULL," +
    "`last_updated_by` VARCHAR(45) NOT NULL," +
    "`last_updated_date` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP," +
    "`hidden` TINYINT(1) NOT NULL DEFAULT 0," +
    "PRIMARY KEY (`page_id`))" +
    "ENGINE = InnoDB;", errorCallback);

/**
 * Execute the creation of a configurations table. This table holds sitewide settings, in the format of [key, value]
 */
connection.query("CREATE TABLE IF NOT EXISTS " + db_name + ".`configurations` (" +
    "`key` varchar(45) NOT NULL," +
    "`value` varchar(200) NOT NULL," +
    "PRIMARY KEY (`key`)" +
    ") ENGINE=InnoDB;", errorCallback);

/**
 * Populate the configurations table with some initial settings (if they don't exist).
 */
connection.query("INSERT IGNORE INTO " + db_name + ".`configurations` (`key`, `value`) VALUES ('active_election_id','0');", errorCallback);
connection.query("INSERT IGNORE INTO " + db_name + ".`configurations` (`key`, `value`) VALUES ('maintenance_mode','0');", errorCallback);

/**
 * Execute the creation of an events table. This table holds event information.
 */
connection.query("CREATE TABLE IF NOT EXISTS " + db_name + ".`events` (" +
    "`event_id` INT NOT NULL AUTO_INCREMENT," +
    "`title` VARCHAR(45) NOT NULL," +
    "`date` DATE NOT NULL," +
    "`start` TIME NULL," +
    "`end` TIME NULL," +
    "`description` VARCHAR(2000) NULL," +
    "`location` VARCHAR(200) NULL," +
    "PRIMARY KEY (`event_id`))" +
    "ENGINE = InnoDB", errorCallback);

/**
 * Execute the creation of an AMA questions table. This table holds questions
 * and answers of candidates on the AMA tab of their profiles.
 */
connection.query("CREATE TABLE IF NOT EXISTS " + db_name + ".`ama_questions` (" +
  "`question_id` INT NOT NULL AUTO_INCREMENT," +
  "`election_id` INT NOT NULL," +
  "`candidate_rcs_id` VARCHAR(45) NOT NULL," +
  "`rcs_id` VARCHAR(45) NOT NULL," +
  "`question_text` TEXT NOT NULL," +
  "`answer_text` TEXT NOT NULL," +
  "`is_anonymous` TINYINT(1) NOT NULL," +
  "`timestamp` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP," +
  "PRIMARY KEY (`question_id`)," +
  "INDEX `questions_fk1_idx` (`election_id` ASC)," +
  "INDEX `questions_fk2_idx` (`candidate_rcs_id` ASC)," +
  "CONSTRAINT `questions_fk1`" +
  "  FOREIGN KEY (`election_id`)" +
  "  REFERENCES " + db_name + ".`elections` (`election_id`)" +
  "  ON DELETE NO ACTION" +
  "  ON UPDATE NO ACTION," +
  "CONSTRAINT `questions_fk2`" +
  "  FOREIGN KEY (`candidate_rcs_id`)" +
  "  REFERENCES " + db_name + ".`candidates` (`rcs_id`)" +
  "  ON DELETE NO ACTION" +
  "  ON UPDATE NO ACTION)" +
  "ENGINE = InnoDB", errorCallback);

/**
 * Re-enable the foreign key checks and standard precautions
 */
connection.query("SET SQL_MODE=@OLD_SQL_MODE", errorCallback);
connection.query("SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS", errorCallback);
connection.query("SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS", errorCallback);


/**
 * Close the database connection
 */
connection.end();
